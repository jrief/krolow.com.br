<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learningpaths on Vinícius Krolow</title>
    <link>http://krolow.com.br/learningpath/</link>
    <description>Recent content in Learningpaths on Vinícius Krolow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Mar 2016 14:23:02 -0300</lastBuildDate>
    <atom:link href="http://krolow.com.br/learningpath/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Back to terminal: Tmux &#43; Vim &#43; ZSH &#43; Gnome Terminal</title>
      <link>http://krolow.com.br/learningpath/terminal/configuring/back-to-terminal-tmux-vim-zsh-gnome-terminal/</link>
      <pubDate>Tue, 08 Mar 2016 14:23:02 -0300</pubDate>
      
      <guid>http://krolow.com.br/learningpath/terminal/configuring/back-to-terminal-tmux-vim-zsh-gnome-terminal/</guid>
      <description>

&lt;p&gt;I was willing to get back to vim (i have used it about 8-9 years ago), In the last couple of years I have switch around between code editors, &lt;strong&gt;I have tried&lt;/strong&gt;: Eclipse, Sublime 2 and lately I have been using atom.&lt;/p&gt;

&lt;p&gt;I get motivated to get back to vim, after &lt;a href=&#34;http://krolow.com.br/learningpath/vim/why-use-vim/talk-mastering-vim-language/&#34;&gt;have watched this talk about Vim&lt;/a&gt;, and by my &lt;a href=&#34;http://nunes.io&#34;&gt;co-worker&lt;/a&gt;, whom is using vim as well&amp;hellip; and it sounds excited to get back for use &lt;strong&gt;only terminal&lt;/strong&gt;, to try avoid as much as possible mouse.&lt;/p&gt;

&lt;p&gt;So well talking back about terminal, It&amp;rsquo;s going to be necessary to leave out from guake, the termianl that I have been using for the last few years. The reason is that guake, is not done to keep in fullscreen, it does it, but his core functionality is to be a drop-down terminal, so it is better to choose another terminal for given task, for this, gnome already come with &lt;code&gt;gnome-terminal&lt;/code&gt;, but It would be nice to gnome-terminal have support to split into panels/windows&amp;hellip; I have remember to have heard about &lt;strong&gt;tmux&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;looking-tmux-https-tmux-github-io:8e71b53f3bf81407dc9ec7f0b960bc77&#34;&gt;Looking &lt;a href=&#34;https://tmux.github.io/&#34;&gt;tmux&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Install in ubuntu:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;sudo apt-get install tmux
&lt;/pre&gt;&lt;/div&gt;

It by defaults uses &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;B&lt;/kbd&gt;, as the shortcut to trigger commands, &lt;strong&gt;but&lt;/strong&gt; it is quite uncomfortable to type, so I was needing to change the trigger, after some research of how to change it I have found this repository: &lt;a href=&#34;http://tony.github.io/tmux-config/&#34;&gt;http://tony.github.io/tmux-config/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is an example of tmux configuration, it changes the shortcut/trigger to &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;a&lt;/kbd&gt; and it brings some cool configurations like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thewtex/tmux-mem-cpu-load&#34;&gt;tmux-mem-cpu-load&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Backing to Tmux itself&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So basically the commands are simple, they &lt;strong&gt;MUST&lt;/strong&gt; be executed after the trigger/predix, so as I have used &lt;em&gt;tmux-config&lt;/em&gt; now it is: &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;a&lt;/kbd&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basic commands that I have learned:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pane&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create vertical&lt;/strong&gt;: &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;a&lt;/kbd&gt; &lt;kbd&gt;%&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create horizontal&lt;/strong&gt;: &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;a&lt;/kbd&gt; &lt;kbd&gt;&amp;ldquo;&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rotate&lt;/strong&gt;: &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;a&lt;/kbd&gt; &lt;kbd&gt;o&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Window&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create new&lt;/strong&gt;: &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;a&lt;/kbd&gt;  &lt;kbd&gt;c&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Move to next window&lt;/strong&gt;:&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;a&lt;/kbd&gt; &lt;kbd&gt;n&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Move to prev window&lt;/strong&gt;: &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;a&lt;/kbd&gt; &lt;kbd&gt;p&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Move to specific window&lt;/strong&gt;: &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;a&lt;/kbd&gt; &lt;kbd&gt;[0-9]&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Scroll in specific panel&lt;/strong&gt; &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt; a &lt;/kbd&gt; &lt;kbd&gt;[&lt;/kbd&gt; to active and &lt;kbd&gt;up&lt;/kbd&gt; or &lt;kbd&gt;down&lt;/kbd&gt; to scroll&lt;/p&gt;

&lt;p&gt;I have decided to start always tmux together with &lt;strong&gt;zsh&lt;/strong&gt;, to achieve such a thing, I have added in the end of my &lt;code&gt;vim ~/.zshrc&lt;/code&gt; the following command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[[&lt;/span&gt; ! &lt;span style=&#34;color: #f8f8f2&#34;&gt;$TERM&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;~ screen &lt;span style=&#34;color: #f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color: #66d9ef&#34;&gt;then&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;exec &lt;/span&gt;tmux
&lt;span style=&#34;color: #66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;given-a-better-look-to-terminal:8e71b53f3bf81407dc9ec7f0b960bc77&#34;&gt;Given a better look to terminal&lt;/h3&gt;

&lt;p&gt;Once been using tmux and gnome-terminal, it would be nice to have a better look in terminal. I have found few themes that would make it look better, so I have changed the themes for: &lt;strong&gt;oh-my-zsh&lt;/strong&gt;, &lt;strong&gt;Gnome Terminal&lt;/strong&gt;, and &lt;strong&gt;Vim&lt;/strong&gt;. For all of them I have tried to pick as similar as possible with atom dark theme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Oh my zsh Theme:&lt;/strong&gt; &lt;a href=&#34;https://github.com/denysdovhan/spaceship-zsh-theme&#34;&gt;Spaceship&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gnome Terminal:&lt;/strong&gt; &lt;a href=&#34;https://github.com/denysdovhan/one-gnome-terminal&#34;&gt;One Gnome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vim:&lt;/strong&gt; &lt;a href=&#34;https://github.com/gosukiwi/vim-atom-dark&#34;&gt;Atom Dark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;to-keep-improve:8e71b53f3bf81407dc9ec7f0b960bc77&#34;&gt;To keep improve&lt;/h4&gt;

&lt;p&gt;I need to give a look on &lt;a href=&#34;https://github.com/powerline/powerline&#34;&gt;Powerline&lt;/a&gt;, after watch the below video it seems amazing:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/DgLIPYP8nnI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
A part of that, I still needing to configure my &lt;strong&gt;vim&lt;/strong&gt;, I have tried to use this &lt;a href=&#34;https://github.com/amix/vimrc&#34;&gt;vimrc&lt;/a&gt; it looks good, &lt;strong&gt;BUT&lt;/strong&gt; I think to begin it would be better if I configure &lt;strong&gt;vim&lt;/strong&gt; by my self, so that I can learn while configure it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Talk Why We use go at Apcera</title>
      <link>http://krolow.com.br/learningpath/go/why-use-go/talk-why-we-use-go-at-apcera/</link>
      <pubDate>Sun, 06 Mar 2016 18:19:12 -0300</pubDate>
      
      <guid>http://krolow.com.br/learningpath/go/why-use-go/talk-why-we-use-go-at-apcera/</guid>
      <description>

&lt;p&gt;This talk from of &lt;a href=&#34;https://twitter.com/derekcollison&#34;&gt;@derekcollison&lt;/a&gt;, shows why they are using golang at &lt;a href=&#34;https://www.apcera.com/&#34;&gt;apcera&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It caught my attention when he refers companies that are using golang, he mention one source:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/gousers&#34;&gt;https://github.com/golang/go/wiki/gousers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Opening the github and doing a quickly count &lt;code&gt;document.querySelectorAll(&#39;.markdown-body li&#39;);&lt;/code&gt; it says about 348 companies using golang are listed in this wiki.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some highlight for:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Digitalocean&lt;/li&gt;
&lt;li&gt;Disqus&lt;/li&gt;
&lt;li&gt;Facebook&lt;/li&gt;
&lt;li&gt;Github&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;IBM&lt;/li&gt;
&lt;li&gt;Netflix&lt;/li&gt;
&lt;li&gt;Pivotal&lt;/li&gt;
&lt;li&gt;Rackspace&lt;/li&gt;
&lt;li&gt;Shopify&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of these companies I didn&amp;rsquo;t know that were using golang, it&amp;rsquo;s nice to see so different companies, using go for achieve their expected results.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;hellip; backing to the talk&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some of the reasons that he gave about why go are:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple language, easy to remember&lt;/li&gt;
&lt;li&gt;Good standard library&lt;/li&gt;
&lt;li&gt;Easy concurrency&lt;/li&gt;
&lt;li&gt;Synchronous Programming Model (he compares that with node.js callbacks)&lt;/li&gt;
&lt;li&gt;Good garbage collection&lt;/li&gt;
&lt;li&gt;Really stacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One point he emphasize and that I most like is that &lt;strong&gt;go is for get things done&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;why-go-at-apcera:09a2c2e163b7c74ce7d99dc4d4d615fb&#34;&gt;Why Go at Apcera?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;In his opinion:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Best choice for distributed systems&lt;/strong&gt;&lt;br /&gt;
He says he is able to test all system by using Go routines, it&amp;rsquo;s not a kind of unit test, but more a functional test&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It&amp;rsquo;s a good core language&lt;/strong&gt;&lt;br /&gt;
He says that is easy to hire talent people, even without a background experience, as it is an accessible language in few weeks people can be productive and know the language well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Good standard library support&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tooling is amazing&lt;/strong&gt;&lt;br /&gt;
go vet, go fmt, go test -race, etc&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;He mention what they do there and why go fit:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Message systems&lt;/li&gt;
&lt;li&gt;Distributed Scheduling system&lt;/li&gt;
&lt;li&gt;Orchestator&lt;/li&gt;
&lt;li&gt;Policy Engine&lt;/li&gt;
&lt;li&gt;Isolation - Secure Perimeter Networking&lt;/li&gt;
&lt;li&gt;Semantically aware communications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He endup the talk asking: &lt;strong&gt;Why Go?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is simple language&lt;/li&gt;
&lt;li&gt;Pretty good ecosystem&lt;/li&gt;
&lt;li&gt;It is getting better faster&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How uber use Go for geolocation</title>
      <link>http://krolow.com.br/learningpath/go/why-use-go/how-uber-use-go-for-geolocation/</link>
      <pubDate>Sat, 27 Feb 2016 23:47:56 -0300</pubDate>
      
      <guid>http://krolow.com.br/learningpath/go/why-use-go/how-uber-use-go-for-geolocation/</guid>
      <description>&lt;p&gt;Good article explaining why they chose Go instead of node.js, to build their geo location query system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some aspects they have highlighted about golang:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High-throughput and low-latency&lt;/li&gt;
&lt;li&gt;CPU intensive workload&lt;/li&gt;
&lt;li&gt;Non-disruptive background loading, refreshing in-memory, in go they would be able to use goroutines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also explains how they come up with the solution to make the index of data, instead of use algorithms like &lt;a href=&#34;https://en.wikipedia.org/wiki/R-tree&#34;&gt;R-tree&lt;/a&gt;, or &lt;a href=&#34;http://blog.christianperone.com/2015/08/googles-s2-geometry-on-the-sphere-cells-and-hilbert-curve/&#34;&gt;S2&lt;/a&gt;
They saw that they are city-centric, all the business logic is related to city, so it allows they create two boundaries, one for the city, so first of all they found the city, and second inside the city they found the geolocations.&lt;/p&gt;

&lt;p&gt;As they said: &amp;ldquo;While the runtime complexity of the solution remains O(N), this simple technique reduced N from the order of 10,000s to the order of 100s.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;They end up summarizing their experience with golang:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High developer productivity (few days to learn language, easy to maintain because static typing)&lt;/li&gt;
&lt;li&gt;High performance in throughput and latency&lt;/li&gt;
&lt;li&gt;Super reliable&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Talk mastering Vim language</title>
      <link>http://krolow.com.br/learningpath/terminal/vim/talk-mastering-vim-language/</link>
      <pubDate>Sat, 27 Feb 2016 23:47:56 -0300</pubDate>
      
      <guid>http://krolow.com.br/learningpath/terminal/vim/talk-mastering-vim-language/</guid>
      <description>&lt;p&gt;He had started the talk, saying about typing not be the bottleneck (made a reference, for an article about tdd, that says exactly the same about TDD), but he says that what is the bottleneck is the time he is thinking how to type&amp;hellip;&lt;/p&gt;

&lt;p&gt;One point that caught my attention, and I agree with that is that we as programmers, we spent most of our time &lt;strong&gt;editing text&lt;/strong&gt;, &lt;strong&gt;not writing text&lt;/strong&gt;, and that&amp;rsquo;s a true fact.&lt;/p&gt;

&lt;p&gt;Vim focus on edit text firstly, while most of editors when you press a key of keyboard you are literally insert such character in the text, vim in the other hand it&amp;rsquo;s editing the text by this keyword pressed, in other words it&amp;rsquo;s trigging some functionality of vim.&lt;/p&gt;

&lt;p&gt;He give some tips of how remember git commands, by split into categories:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verbs&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d =&amp;gt; &lt;strong&gt;Delete&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;c =&amp;gt; &lt;strong&gt;Change&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&amp;gt; =&amp;gt; &lt;strong&gt;Indent&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;v =&amp;gt; &lt;strong&gt;Visually select&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;y =&amp;gt; &lt;strong&gt;Yank&lt;/strong&gt; (copy)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Noun in Vim &amp;ndash; Motions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;w =&amp;gt; &lt;strong&gt;word&lt;/strong&gt; (forward by a &amp;ldquo;word&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;b =&amp;gt; &lt;strong&gt;back&lt;/strong&gt; (back by a &amp;ldquo;word&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;2j =&amp;gt; down 2 lines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Noun in Vim &amp;ndash; Text Objects&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iw =&amp;gt; &lt;strong&gt;inner word&lt;/strong&gt; (works from anywhere in a word)&lt;/li&gt;
&lt;li&gt;it =&amp;gt; &lt;strong&gt;inner tag&lt;/strong&gt; (the contents of an HTML tag)&lt;/li&gt;
&lt;li&gt;i =&amp;gt; &lt;strong&gt;inner quotes&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;ip =&amp;gt; &lt;strong&gt;inner paragraph&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;as =&amp;gt; &lt;strong&gt;a sentance&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Nouns in Vim &amp;ndash; Parameterized Text Objects&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;f, F =&amp;gt; &amp;ldquo;find&amp;rdquo; next character&lt;/li&gt;
&lt;li&gt;t, T =&amp;gt; &amp;ldquo;find&amp;rdquo; next character&lt;/li&gt;
&lt;li&gt;/ =&amp;gt; Search (up to the next match)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By memorize 30 key mappings it&amp;rsquo;s possible to achieve 2000 distinct commands.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to go channels</title>
      <link>http://krolow.com.br/learningpath/go/channels/introduction-to-go-channels/</link>
      <pubDate>Fri, 26 Feb 2016 23:47:56 -0300</pubDate>
      
      <guid>http://krolow.com.br/learningpath/go/channels/introduction-to-go-channels/</guid>
      <description>

&lt;p&gt;In this post &lt;a href=&#34;https://twitter.com/karlseguin&#34;&gt;@karlseguin&lt;/a&gt; explains how channels work in golang.&lt;/p&gt;

&lt;p&gt;So basically channels is the way golang uses to make communication between goroutines. Can be for both, pass signals or data around, different than thread-based programming it is not necessary to lock data around, to avoid deadlocks, as with goroutines only one goroutine has access to a piece of data at a given time. So it does not do a lock of data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;He gives one analogy about, thread vs  golang channels:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
Consider a phone conversation. It can be difficult to coordinate who should talk, especially as more people get added to the conversation. It isn&#39;t uncommon for two people to speak at once. Conversely, it also isn&#39;t uncommon for one person to do all the talking and not let the others participate. This, to me, is what thread-based programming is like.&lt;br /&gt;&lt;br /&gt;
Channels on the other hand, are more like passing notes in class. Coordination is strictly controlled by the act of passing the note to someone. There&#39;s simply no way for you and your friend to write on the same note at the same time.
&lt;/blockquote&gt;

&lt;h3 id=&#34;how-create-a-go-channel:8ed816eb0536eba8df58334adeebd73f&#34;&gt;How create a go channel?&lt;/h3&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br /&gt;
Basically it creates one channel that enables pass integers between goroutines. It is called &lt;strong&gt;buffer channel&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>