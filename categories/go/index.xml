<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Vinícius Krolow</title>
    <link>http://krolow.com.br/categories/go/</link>
    <description>Recent content in Go on Vinícius Krolow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Mar 2016 18:19:12 -0300</lastBuildDate>
    <atom:link href="http://krolow.com.br/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Talk Why We use go at Apcera</title>
      <link>http://krolow.com.br/learningpath/go/why-use-go/talk-why-we-use-go-at-apcera/</link>
      <pubDate>Sun, 06 Mar 2016 18:19:12 -0300</pubDate>
      
      <guid>http://krolow.com.br/learningpath/go/why-use-go/talk-why-we-use-go-at-apcera/</guid>
      <description>

&lt;p&gt;This talk from of &lt;a href=&#34;https://twitter.com/derekcollison&#34;&gt;@derekcollison&lt;/a&gt;, shows why they are using golang at &lt;a href=&#34;https://www.apcera.com/&#34;&gt;apcera&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It caught my attention when he refers companies that are using golang, he mention one source:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/gousers&#34;&gt;https://github.com/golang/go/wiki/gousers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Opening the github and doing a quickly count &lt;code&gt;document.querySelectorAll(&#39;.markdown-body li&#39;);&lt;/code&gt; it says about 348 companies using golang are listed in this wiki.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some highlight for:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Digitalocean&lt;/li&gt;
&lt;li&gt;Disqus&lt;/li&gt;
&lt;li&gt;Facebook&lt;/li&gt;
&lt;li&gt;Github&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;IBM&lt;/li&gt;
&lt;li&gt;Netflix&lt;/li&gt;
&lt;li&gt;Pivotal&lt;/li&gt;
&lt;li&gt;Rackspace&lt;/li&gt;
&lt;li&gt;Shopify&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of these companies I didn&amp;rsquo;t know that were using golang, it&amp;rsquo;s nice to see so different companies, using go for achieve their expected results.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;hellip; backing to the talk&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some of the reasons that he gave about why go are:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple language, easy to remember&lt;/li&gt;
&lt;li&gt;Good standard library&lt;/li&gt;
&lt;li&gt;Easy concurrency&lt;/li&gt;
&lt;li&gt;Synchronous Programming Model (he compares that with node.js callbacks)&lt;/li&gt;
&lt;li&gt;Good garbage collection&lt;/li&gt;
&lt;li&gt;Really stacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One point he emphasize and that I most like is that &lt;strong&gt;go is for get things done&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;why-go-at-apcera:09a2c2e163b7c74ce7d99dc4d4d615fb&#34;&gt;Why Go at Apcera?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;In his opinion:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Best choice for distributed systems&lt;/strong&gt;&lt;br /&gt;
He says he is able to test all system by using Go routines, it&amp;rsquo;s not a kind of unit test, but more a functional test&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It&amp;rsquo;s a good core language&lt;/strong&gt;&lt;br /&gt;
He says that is easy to hire talent people, even without a background experience, as it is an accessible language in few weeks people can be productive and know the language well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Good standard library support&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tooling is amazing&lt;/strong&gt;&lt;br /&gt;
go vet, go fmt, go test -race, etc&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;He mention what they do there and why go fit:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Message systems&lt;/li&gt;
&lt;li&gt;Distributed Scheduling system&lt;/li&gt;
&lt;li&gt;Orchestator&lt;/li&gt;
&lt;li&gt;Policy Engine&lt;/li&gt;
&lt;li&gt;Isolation - Secure Perimeter Networking&lt;/li&gt;
&lt;li&gt;Semantically aware communications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He endup the talk asking: &lt;strong&gt;Why Go?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is simple language&lt;/li&gt;
&lt;li&gt;Pretty good ecosystem&lt;/li&gt;
&lt;li&gt;It is getting better faster&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How uber use Go for geolocation</title>
      <link>http://krolow.com.br/learningpath/go/why-use-go/how-uber-use-go-for-geolocation/</link>
      <pubDate>Sat, 27 Feb 2016 23:47:56 -0300</pubDate>
      
      <guid>http://krolow.com.br/learningpath/go/why-use-go/how-uber-use-go-for-geolocation/</guid>
      <description>&lt;p&gt;Good article explaining why they chose Go instead of node.js, to build their geo location query system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some aspects they have highlighted about golang:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High-throughput and low-latency&lt;/li&gt;
&lt;li&gt;CPU intensive workload&lt;/li&gt;
&lt;li&gt;Non-disruptive background loading, refreshing in-memory, in go they would be able to use goroutines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also explains how they come up with the solution to make the index of data, instead of use algorithms like &lt;a href=&#34;https://en.wikipedia.org/wiki/R-tree&#34;&gt;R-tree&lt;/a&gt;, or &lt;a href=&#34;http://blog.christianperone.com/2015/08/googles-s2-geometry-on-the-sphere-cells-and-hilbert-curve/&#34;&gt;S2&lt;/a&gt;
They saw that they are city-centric, all the business logic is related to city, so it allows they create two boundaries, one for the city, so first of all they found the city, and second inside the city they found the geolocations.&lt;/p&gt;

&lt;p&gt;As they said: &amp;ldquo;While the runtime complexity of the solution remains O(N), this simple technique reduced N from the order of 10,000s to the order of 100s.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;They end up summarizing their experience with golang:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High developer productivity (few days to learn language, easy to maintain because static typing)&lt;/li&gt;
&lt;li&gt;High performance in throughput and latency&lt;/li&gt;
&lt;li&gt;Super reliable&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to go channels</title>
      <link>http://krolow.com.br/learningpath/go/channels/introduction-to-go-channels/</link>
      <pubDate>Fri, 26 Feb 2016 23:47:56 -0300</pubDate>
      
      <guid>http://krolow.com.br/learningpath/go/channels/introduction-to-go-channels/</guid>
      <description>

&lt;p&gt;In this post &lt;a href=&#34;https://twitter.com/karlseguin&#34;&gt;@karlseguin&lt;/a&gt; explains how channels work in golang.&lt;/p&gt;

&lt;p&gt;So basically channels is the way golang uses to make communication between goroutines. Can be for both, pass signals or data around, different than thread-based programming it is not necessary to lock data around, to avoid deadlocks, as with goroutines only one goroutine has access to a piece of data at a given time. So it does not do a lock of data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;He gives one analogy about, thread vs  golang channels:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
Consider a phone conversation. It can be difficult to coordinate who should talk, especially as more people get added to the conversation. It isn&#39;t uncommon for two people to speak at once. Conversely, it also isn&#39;t uncommon for one person to do all the talking and not let the others participate. This, to me, is what thread-based programming is like.&lt;br /&gt;&lt;br /&gt;
Channels on the other hand, are more like passing notes in class. Coordination is strictly controlled by the act of passing the note to someone. There&#39;s simply no way for you and your friend to write on the same note at the same time.
&lt;/blockquote&gt;

&lt;h3 id=&#34;how-create-a-go-channel:8ed816eb0536eba8df58334adeebd73f&#34;&gt;How create a go channel?&lt;/h3&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br /&gt;
Basically it creates one channel that enables pass integers between goroutines. It is called &lt;strong&gt;buffer channel&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>